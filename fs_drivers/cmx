local filesystem = {}

function filesystem:createNewHD(path)
  local file, err = fs.open(path, "w")
  local hd = {
    inodes = {
      [1] = 1
    },
    blocks = {
      [1] = {
        type = "directory",
        owner = "root",
        group_owner = "",
        data = {}
      }
    },
    handlers = {},
    free_inodes = {},
    free_blocks = {},
    -- subtracted by 10kb for security reasons when saving this file
    free_space = fs.getFreeSpace(path) - 10000
  }
  self.hd = hd
  file.write(textutils.serialize(hd))
  file.close()
end

function filesystem:loadHD(path)
  local file, err = fs.open(path, "r")
  local data = file.readAll()
  self.hd = textutils.unserialize(data)
  file.close()
end

function filesystem:saveToFile(path)
  local file, err = fs.open(path, "w")
  file.write(textutils.serialize(self.hd))
  file.close()
end

local function split(inputstr, sep)
  if sep == nil then
    sep = "%s"
  end
  local t={} ; i=1
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    t[i] = str
    i = i + 1
  end
  return t
end
function filesystem:resolveBlock(path)
  local currentInode = 1
  local currentBlock = self.hd.blocks[1]
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  if path == "" then return currentInode, currentBlock end

  local parts = split(path, "/")
  while true do
    if currentBlock.type == "link" and self.hd.inodes[currentBlock.data] and #parts > 1 then
      currentInode = currentBlock.data
      currentBlock = self.hd.blocks[self.hd.inodes[currentInode]]
      table.remove(parts, 1)
    elseif currentBlock.type == "link" and not self.hd.inodes[currentBlock.data] then
      return false
    else
      if currentBlock.type == "directory" and currentBlock.data[parts[1]] and #parts > 1 then
        currentInode = currentBlock.data[parts[1]]
        currentBlock = self.hd.blocks[self.hd.inodes[currentInode]]
        if currentBlock.type ~= "link" then
          table.remove(parts, 1)
        end
      elseif currentBlock.type == "directory" and currentBlock.data[parts[1]] and #parts <= 1 then
        currentInode = currentBlock.data[parts[1]]
        currentBlock = self.hd.blocks[self.hd.inodes[currentInode]]
        return currentInode, currentBlock
      else
        return false
      end

    end
  end
end

function filesystem:newBlock(type, owner, owner_group)
  local newInode
  local newBlock
  if #self.hd.free_inodes > 0 then
    newInode = table.remove(self.hd.free_inodes)
  else
    newInode = #self.hd.inodes+1
  end
  if #self.hd.free_blocks > 0 then
    newBlock = table.remove(self.hd.free_blocks)
  else
    newBlock = #self.hd.blocks+1
  end
  self.hd.inodes[newInode] = newBlock
  self.hd.blocks[newBlock] = {
    type = type,
    owner = owner or "root",
    group_owner = owner_group or ""
  }
  if type == "file" then
    self.hd.blocks[newBlock].data = ""
  elseif type == "link" then
    self.hd.blocks[newBlock].data = 1
  else
    self.hd.blocks[newBlock].data = {}
  end
  return newInode, newBlock
end

function filesystem:makeDir(path, owner, owner_group)
  if path == "/" or path == "" then return false, "invalid path" end
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  if self:resolveBlock(path) then return false, "file already exists" end
  if string.find(path, "/") then
    local parts = split(path, "/")
    local filename = table.remove(parts)
    local parent = ""
    for each, part in ipairs(parts) do
      parent = parent.."/"..part
    end
    if string.sub(parent, 1, 1) == "/" then parent = string.sub(parent, 2) end
    if not self:resolveBlock(parent) then return false, "parent not found" end
    local parentInode, parentBlock = self:resolveBlock(parent)
    local newInode, newBlock = self:newBlock("directory", owner, owner_group)
    parentBlock.data[filename] = newInode
  else
    local newInode, newBlock = self:newBlock("directory", owner, owner_group)
    self.hd.blocks[1].data[path] = newInode
  end
  return true
end

function filesystem:makeLink(path, destination, owner, owner_group)
  if path == "/" or path == "" then return false, "invalid path" end
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  if self:resolveBlock(path) then return false, "file already exists" end


  if string.sub(destination, 1, 1) == "/" then destination = string.sub(destination, 2) end
  if string.sub(destination, #destination) == "/" then destination = string.sub(destination, 1, #destination-1) end
  if not self:resolveBlock(destination) then return false, "path does not exist" end

  local destinationInode, destinationBlock = self:resolveBlock(destination)

  if destinationBlock.type ~= "directory" then return false, "path is not folder" end


  if string.find(path, "/") then
    local parts = split(path, "/")
    local filename = table.remove(parts)
    local parent = ""
    for each, part in ipairs(parts) do
      parent = parent.."/"..part
    end
    if string.sub(parent, 1, 1) == "/" then parent = string.sub(parent, 2) end
    if not self:resolveBlock(parent) then return false, "parent not found" end
    local parentInode, parentBlock = self:resolveBlock(parent)
    local newInode, newBlock = self:newBlock("link", owner, owner_group)
    parentBlock.data[filename] = newInode
    self.hd.blocks[newBlock].data = destinationInode
  else
    local newInode, newBlock = self:newBlock("link", owner, owner_group)
    self.hd.blocks[1].data[path] = newInode
    self.hd.blocks[newBlock].data = destinationInode
  end
  return true
end

function filesystem:list(path)
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  if not self:resolveBlock(path) then return false, "path not found" end
  local foundInode, foundBlock = self:resolveBlock(path)
  if (foundBlock.type ~= "directory" and foundBlock.type ~= "link") then return false, "path is not a directory" end
  if foundBlock.type == "link" then
    foundInode = foundBlock.data
    foundBlock = self.hd.blocks[self.hd.inodes[foundInode]]
  end
  local t = {}
  for folder, inode in pairs(foundBlock.data) do
    table.insert(t, folder)
  end
  return t
end

function filesystem:delete(path)
  if path == "/" or path == "" then return false, "invalid path" end
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  if not self:resolveBlock(path) then return false, "file not found" end
  local foundInode, foundBlock = self:resolveBlock(path)
  if foundBlock.type == "directory" then
    local counter = 0
    for each, ino in pairs(foundBlock.data) do
      counter = counter+1
    end
    if counter > 0 then
      return false, "directory is not empty"
    end
  end
  if string.find(path, "/") then
    local parts = split(path, "/")
    local filename = table.remove(parts)
    local parent = ""
    for each, part in ipairs(parts) do
      parent = parent.."/"..part
    end
    parent = string.sub(parent, 2)
    local parentInode, parentBlock = self:resolveBlock(parent)
    table.insert(self.hd.free_inodes, foundInode)
    table.insert(self.hd.free_blocks, self.hd.inodes[foundInode])
    parentBlock.data[filename] = nil
    if foundBlock.type == "file" then
      self.hd.free_space = self.hd.free_space+string.len(foundBlock.data)
    end
    self.hd.blocks[self.hd.inodes[foundInode]] = nil
    self.hd.inodes[foundInode] = nil
  else
    table.insert(self.hd.free_inodes, foundInode)
    table.insert(self.hd.free_blocks, self.hd.inodes[foundInode])
    self.hd.blocks[1].data[filename] = nil
    if foundBlock.type == "file" then
      self.hd.free_space = self.hd.free_space+string.len(foundBlock.data)
    end
    self.hd.blocks[self.hd.inodes[foundInode]] = nil
    self.hd.inodes[foundInode] = nil
  end
end
function filesystem:open(path, mode, owner, owner_group)
  if path == "/" or path == "" then return false, "invalid path" end
  if string.sub(path, 1, 1) == "/" then path = string.sub(path, 2) end
  if string.sub(path, #path) == "/" then path = string.sub(path, 1, #path-1) end
  local fileInode, fileBlock
  if self:resolveBlock(path) then
    fileInode, fileBlock = self:resolveBlock(path)
    local handler = {
      id = #self.hd.handlers+1,
      block = fileBlock
    }
    if mode == "w" or mode == "r" or mode == "a" then
      handler.mode = mode
    else
      handler.mode = "r"
    end
    handler.position = 1
    table.insert(self.hd.handlers, handler)
    if handler.mode == "w" then
      self.hd.free_space = self.hd.free_space + string.len(handler.block.data)
      handler.block.data = ""
    end
    return handler.id
  else
    if string.find(path, "/") then
      local parts = split(path, "/")
      local filename = table.remove(parts)
      local parent = ""
      for each, part in ipairs(parts) do
        parent = parent.."/"..part
      end
      if string.sub(parent, 1, 1) == "/" then parent = string.sub(parent, 2) end
      if not self:resolveBlock(parent) then return false, "parent not found" end
      local parentInode, parentBlock = self:resolveBlock(parent)
      local newInode, newBlock = self:newBlock("file", owner, owner_group)
      parentBlock.data[filename] = newInode
      local handler = {
        id = #self.hd.handlers+1,
        block = self.hd.blocks[newBlock]
      }
      if mode == "w" or mode == "r" or mode == "a" then
        handler.mode = mode
      else
        handler.mode = "r"
      end
      handler.position = 1
      table.insert(self.hd.handlers, handler)
      if handler.mode == "w" then
        self.hd.free_space = self.hd.free_space + string.len(handler.block.data)
        handler.block.data = ""
      end
      return handler.id
    else
      local newInode, newBlock = self:newBlock("file", owner, owner_group)
      self.hd.blocks[1].data[path] = newInode
      local handler = {
        id = #self.hd.handlers+1,
        block = self.hd.blocks[newBlock]
      }
      if mode == "w" or mode == "r" or mode == "a" then
        handler.mode = mode
      else
        handler.mode = "r"
      end
      handler.position = 1
      if handler.mode == "w" then
        self.hd.free_space = self.hd.free_space + string.len(handler.block.data)
        handler.block.data = ""
      end
      table.insert(self.hd.handlers, handler)
      return handler.id
    end
  end
end

function filesystem:write(handler_id, data)
  for each, handler in ipairs(self.hd.handlers) do
    if handler.id == handler_id and (handler.mode == "w" or handler.mode == "a") then
      if self.hd.free_space >= string.len(data) then
        handler.block.data = handler.block.data..tostring(data)
        handler.position = handler.position+#data
        self.hd.free_space = self.hd.free_space - string.len(data)
        return true
      else
        return false, "not enough space"
      end
    end
  end
end

function filesystem:read(handler_id, amount)
  for each, handler in ipairs(self.hd.handlers) do
    if handler.id == handler_id and handler.mode == "r" then
      local dat = string.sub(handler.block.data, handler.position, handler.position+amount)
      handler.position = handler.position+amount
      return dat
    end
  end
end

function filesystem:close(handler_id)
  for each, handler in ipairs(self.hd.handlers) do
    if handler.id == handler_id then
      table.remove(self.hd.handlers, each)
      return
    end
  end
end

return filesystem
